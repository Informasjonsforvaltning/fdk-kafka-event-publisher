---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: fdk-concept-event-publisher
  labels:
    fdk.service: fdk-concept-event-publisher
spec:
  replicas: 1
  selector:
    matchLabels:
      fdk.service: fdk-concept-event-publisher
  strategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        fdk.service: fdk-concept-event-publisher
      annotations:
        prometheus.io/scrape: "true"
    spec:
      containers:
        - env:
          - name: SCHEMA_REGISTRY
            valueFrom:
              secretKeyRef:
                name: fdk-metadata-quality-staging
                key: SCHEMA_REGISTRY
          - name: BROKERS
            valueFrom:
              secretKeyRef:
                name: fdk-metadata-quality-staging
                key: BROKERS
          - name: RABBITMQ_USERNAME
            valueFrom:
              secretKeyRef:
                name: rabbitmq-staging
                key: RABBITMQ_USERNAME
          - name: RABBITMQ_PASSWORD
            valueFrom:
              secretKeyRef:
                name: rabbitmq-staging
                key: RABBITMQ_PASSWORD
          - name: RABBITMQ_HOST
            valueFrom:
              secretKeyRef:
                name: rabbitmq-staging
                key: RABBITMQ_HOST
          - name: RABBITMQ_PORT
            valueFrom:
              secretKeyRef:
                name: rabbitmq-staging
                key: RABBITMQ_PORT
          - name: HARVESTER_API_URL
            valueFrom:
              secretKeyRef:
                name: commonurl-staging
                key: FDK_CONCEPT_HARVESTER_URI
          - name: REASONING_API_URL
            valueFrom:
              secretKeyRef:
                name: commonurl-staging
                key: FDK_REASONING_SERVICE_URI
          name: fdk-concept-event-publisher
          image: fdk-concept-event-publisher
          imagePullPolicy: Always
          ports:
            - containerPort: 8080
          resources:
            requests:
              memory: "500Mi"
          livenessProbe:
            exec:
              command:
                - "true"
          readinessProbe:
            exec:
              command:
                - "true"
      restartPolicy: Always
